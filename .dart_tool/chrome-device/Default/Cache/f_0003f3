define(['dart_sdk', 'packages/logging/src/level.dart'], (function load__packages__logging__src__logger_dart(dart_sdk, packages__logging__src__level$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const level = packages__logging__src__level$46dart.src__level;
  var logger = Object.create(dart.library);
  var log_record = Object.create(dart.library);
  var $_set = dartx._set;
  var $isNotEmpty = dartx.isNotEmpty;
  var $putIfAbsent = dartx.putIfAbsent;
  var $startsWith = dartx.startsWith;
  var $lastIndexOf = dartx.lastIndexOf;
  var $substring = dartx.substring;
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    UnmodifiableMapViewOfString$Logger: () => (T.UnmodifiableMapViewOfString$Logger = dart.constFn(collection.UnmodifiableMapView$(core.String, logger.Logger)))(),
    VoidToLogger: () => (T.VoidToLogger = dart.constFn(dart.fnType(logger.Logger, [])))(),
    IdentityMapOfString$Logger: () => (T.IdentityMapOfString$Logger = dart.constFn(_js_helper.IdentityMap$(core.String, logger.Logger)))(),
    StreamControllerOfLogRecord: () => (T.StreamControllerOfLogRecord = dart.constFn(async.StreamController$(log_record.LogRecord)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: level.Level.prototype,
        [Level_value]: 800,
        [Level_name]: "INFO"
      });
    }
  }, false);
  var C = [void 0];
  var I = [
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/logging-1.0.0/lib/src/logger.dart",
    "package:logging/src/logger.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/logging-1.0.0/lib/src/log_record.dart",
    "package:logging/src/log_record.dart"
  ];
  var name$ = dart.privateName(logger, "Logger.name");
  var parent$ = dart.privateName(logger, "Logger.parent");
  var children$ = dart.privateName(logger, "Logger.children");
  var _level = dart.privateName(logger, "_level");
  var _controller = dart.privateName(logger, "_controller");
  var _children = dart.privateName(logger, "_children");
  var _getStream = dart.privateName(logger, "_getStream");
  var _publish = dart.privateName(logger, "_publish");
  logger.Logger = class Logger extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get parent() {
      return this[parent$];
    }
    set parent(value) {
      super.parent = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get fullName() {
      let t0, t0$;
      return dart.test((t0$ = (t0 = this.parent, t0 == null ? null : t0.name[$isNotEmpty]), t0$ == null ? false : t0$)) ? dart.str(dart.nullCheck(this.parent).fullName) + "." + dart.str(this.name) : this.name;
    }
    static new(name) {
      if (name == null) dart.nullFailed(I[0], 56, 25, "name");
      return logger.Logger._loggers[$putIfAbsent](name, dart.fn(() => logger.Logger._named(name), T.VoidToLogger()));
    }
    static detached(name) {
      if (name == null) dart.nullFailed(I[0], 67, 34, "name");
      return new logger.Logger._internal(name, null, new (T.IdentityMapOfString$Logger()).new());
    }
    static _named(name) {
      if (name == null) dart.nullFailed(I[0], 70, 32, "name");
      if (name[$startsWith](".")) {
        dart.throw(new core.ArgumentError.new("name shouldn't start with a '.'"));
      }
      let dot = name[$lastIndexOf](".");
      let parent = null;
      let thisName = null;
      if (dot === -1) {
        if (name !== "") parent = logger.Logger.new("");
        thisName = name;
      } else {
        parent = logger.Logger.new(name[$substring](0, dot));
        thisName = name[$substring](dot + 1);
      }
      return new logger.Logger._internal(thisName, parent, new (T.IdentityMapOfString$Logger()).new());
    }
    get level() {
      let t0;
      let effectiveLevel = null;
      if (this.parent == null) {
        effectiveLevel = dart.nullCheck(this[_level]);
      } else if (!dart.test(logger.hierarchicalLoggingEnabled)) {
        effectiveLevel = dart.nullCheck(logger.Logger.root[_level]);
      } else {
        effectiveLevel = (t0 = this[_level], t0 == null ? dart.nullCheck(this.parent).level : t0);
      }
      if (!(effectiveLevel != null)) dart.assertFailed(null, I[0], 114, 12, "effectiveLevel != null");
      return effectiveLevel;
    }
    set level(value) {
      if (!dart.test(logger.hierarchicalLoggingEnabled) && this.parent != null) {
        dart.throw(new core.UnsupportedError.new("Please set \"hierarchicalLoggingEnabled\" to true if you want to " + "change the level on a non-root logger."));
      }
      if (this.parent == null && value == null) {
        dart.throw(new core.UnsupportedError.new("Cannot set the level to `null` on a logger with no parent."));
      }
      this[_level] = value;
    }
    get onRecord() {
      return this[_getStream]();
    }
    clearListeners() {
      let t0;
      if (dart.test(logger.hierarchicalLoggingEnabled) || this.parent == null) {
        t0 = this[_controller];
        t0 == null ? null : t0.close();
        this[_controller] = null;
      } else {
        logger.Logger.root.clearListeners();
      }
    }
    isLoggable(value) {
      if (value == null) dart.nullFailed(I[0], 153, 25, "value");
      return value['>='](this.level);
    }
    log(logLevel, message, error = null, stackTrace = null, zone = null) {
      if (logLevel == null) dart.nullFailed(I[0], 172, 18, "logLevel");
      let object = null;
      if (dart.test(this.isLoggable(logLevel))) {
        if (core.Function.is(message)) {
          message = dart.dcall(message, []);
        }
        let msg = null;
        if (typeof message == 'string') {
          msg = message;
        } else {
          msg = dart.toString(message);
          object = message;
        }
        if (stackTrace == null && dart.test(logLevel['>='](logger.recordStackTraceAtLevel))) {
          stackTrace = core.StackTrace.current;
          error == null ? error = "autogenerated stack trace for " + dart.str(logLevel) + " " + dart.str(msg) : null;
        }
        zone == null ? zone = async.Zone.current : null;
        let record = new log_record.LogRecord.new(logLevel, msg, this.fullName, error, stackTrace, zone, object);
        if (this.parent == null) {
          this[_publish](record);
        } else if (!dart.test(logger.hierarchicalLoggingEnabled)) {
          logger.Logger.root[_publish](record);
        } else {
          let target = this;
          while (target != null) {
            target[_publish](record);
            target = target.parent;
          }
        }
      }
    }
    finest(message, error = null, stackTrace = null) {
      return this.log(level.Level.FINEST, message, error, stackTrace);
    }
    finer(message, error = null, stackTrace = null) {
      return this.log(level.Level.FINER, message, error, stackTrace);
    }
    fine(message, error = null, stackTrace = null) {
      return this.log(level.Level.FINE, message, error, stackTrace);
    }
    config(message, error = null, stackTrace = null) {
      return this.log(level.Level.CONFIG, message, error, stackTrace);
    }
    info(message, error = null, stackTrace = null) {
      return this.log(level.Level.INFO, message, error, stackTrace);
    }
    warning(message, error = null, stackTrace = null) {
      return this.log(level.Level.WARNING, message, error, stackTrace);
    }
    severe(message, error = null, stackTrace = null) {
      return this.log(level.Level.SEVERE, message, error, stackTrace);
    }
    shout(message, error = null, stackTrace = null) {
      return this.log(level.Level.SHOUT, message, error, stackTrace);
    }
    [_getStream]() {
      let t0;
      if (dart.test(logger.hierarchicalLoggingEnabled) || this.parent == null) {
        return (t0 = this[_controller], t0 == null ? this[_controller] = T.StreamControllerOfLogRecord().broadcast({sync: true}) : t0).stream;
      } else {
        return logger.Logger.root[_getStream]();
      }
    }
    [_publish](record) {
      let t0;
      if (record == null) dart.nullFailed(I[0], 276, 27, "record");
      t0 = this[_controller];
      return t0 == null ? null : t0.add(record);
    }
  };
  (logger.Logger._internal = function(name, parent, children) {
    if (name == null) dart.nullFailed(I[0], 88, 25, "name");
    if (children == null) dart.nullFailed(I[0], 88, 64, "children");
    this[_level] = null;
    this[_controller] = null;
    this[name$] = name;
    this[parent$] = parent;
    this[_children] = children;
    this[children$] = new (T.UnmodifiableMapViewOfString$Logger()).new(children);
    if (this.parent == null) {
      this[_level] = logger.defaultLevel;
    } else {
      dart.nullCheck(this.parent)[_children][$_set](this.name, this);
    }
  }).prototype = logger.Logger.prototype;
  dart.addTypeTests(logger.Logger);
  dart.addTypeCaches(logger.Logger);
  dart.setMethodSignature(logger.Logger, () => ({
    __proto__: dart.getMethods(logger.Logger.__proto__),
    clearListeners: dart.fnType(dart.void, []),
    isLoggable: dart.fnType(core.bool, [level.Level]),
    log: dart.fnType(dart.void, [level.Level, dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace), dart.nullable(async.Zone)]),
    finest: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    finer: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    fine: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    config: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    info: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    warning: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    severe: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    shout: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    [_getStream]: dart.fnType(async.Stream$(log_record.LogRecord), []),
    [_publish]: dart.fnType(dart.void, [log_record.LogRecord])
  }));
  dart.setGetterSignature(logger.Logger, () => ({
    __proto__: dart.getGetters(logger.Logger.__proto__),
    fullName: core.String,
    level: level.Level,
    onRecord: async.Stream$(log_record.LogRecord)
  }));
  dart.setSetterSignature(logger.Logger, () => ({
    __proto__: dart.getSetters(logger.Logger.__proto__),
    level: dart.nullable(level.Level)
  }));
  dart.setLibraryUri(logger.Logger, I[1]);
  dart.setFieldSignature(logger.Logger, () => ({
    __proto__: dart.getFields(logger.Logger.__proto__),
    name: dart.finalFieldType(core.String),
    parent: dart.finalFieldType(dart.nullable(logger.Logger)),
    [_level]: dart.fieldType(dart.nullable(level.Level)),
    [_children]: dart.finalFieldType(core.Map$(core.String, logger.Logger)),
    children: dart.finalFieldType(core.Map$(core.String, logger.Logger)),
    [_controller]: dart.fieldType(dart.nullable(async.StreamController$(log_record.LogRecord)))
  }));
  dart.defineLazy(logger.Logger, {
    /*logger.Logger.root*/get root() {
      return logger.Logger.new("");
    },
    /*logger.Logger._loggers*/get _loggers() {
      return new (T.IdentityMapOfString$Logger()).new();
    }
  }, false);
  var Level_value = dart.privateName(level, "Level.value");
  var Level_name = dart.privateName(level, "Level.name");
  dart.defineLazy(logger, {
    /*logger.hierarchicalLoggingEnabled*/get hierarchicalLoggingEnabled() {
      return false;
    },
    set hierarchicalLoggingEnabled(_) {},
    /*logger.recordStackTraceAtLevel*/get recordStackTraceAtLevel() {
      return level.Level.OFF;
    },
    set recordStackTraceAtLevel(_) {},
    /*logger.defaultLevel*/get defaultLevel() {
      return C[0] || CT.C0;
    }
  }, false);
  var level$ = dart.privateName(log_record, "LogRecord.level");
  var message$ = dart.privateName(log_record, "LogRecord.message");
  var object$ = dart.privateName(log_record, "LogRecord.object");
  var loggerName$ = dart.privateName(log_record, "LogRecord.loggerName");
  var time = dart.privateName(log_record, "LogRecord.time");
  var sequenceNumber = dart.privateName(log_record, "LogRecord.sequenceNumber");
  var error$ = dart.privateName(log_record, "LogRecord.error");
  var stackTrace$ = dart.privateName(log_record, "LogRecord.stackTrace");
  var zone$ = dart.privateName(log_record, "LogRecord.zone");
  log_record.LogRecord = class LogRecord extends core.Object {
    get level() {
      return this[level$];
    }
    set level(value) {
      super.level = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get object() {
      return this[object$];
    }
    set object(value) {
      super.object = value;
    }
    get loggerName() {
      return this[loggerName$];
    }
    set loggerName(value) {
      super.loggerName = value;
    }
    get time() {
      return this[time];
    }
    set time(value) {
      super.time = value;
    }
    get sequenceNumber() {
      return this[sequenceNumber];
    }
    set sequenceNumber(value) {
      super.sequenceNumber = value;
    }
    get error() {
      return this[error$];
    }
    set error(value) {
      super.error = value;
    }
    get stackTrace() {
      return this[stackTrace$];
    }
    set stackTrace(value) {
      super.stackTrace = value;
    }
    get zone() {
      return this[zone$];
    }
    set zone(value) {
      super.zone = value;
    }
    toString() {
      return "[" + dart.str(this.level.name) + "] " + dart.str(this.loggerName) + ": " + dart.str(this.message);
    }
  };
  (log_record.LogRecord.new = function(level, message, loggerName, error = null, stackTrace = null, zone = null, object = null) {
    let t0;
    if (level == null) dart.nullFailed(I[2], 35, 18, "level");
    if (message == null) dart.nullFailed(I[2], 35, 30, "message");
    if (loggerName == null) dart.nullFailed(I[2], 35, 44, "loggerName");
    this[level$] = level;
    this[message$] = message;
    this[loggerName$] = loggerName;
    this[error$] = error;
    this[stackTrace$] = stackTrace;
    this[zone$] = zone;
    this[object$] = object;
    this[time] = new core.DateTime.now();
    this[sequenceNumber] = (t0 = log_record.LogRecord._nextNumber, log_record.LogRecord._nextNumber = dart.notNull(t0) + 1, t0);
    ;
  }).prototype = log_record.LogRecord.prototype;
  dart.addTypeTests(log_record.LogRecord);
  dart.addTypeCaches(log_record.LogRecord);
  dart.setLibraryUri(log_record.LogRecord, I[3]);
  dart.setFieldSignature(log_record.LogRecord, () => ({
    __proto__: dart.getFields(log_record.LogRecord.__proto__),
    level: dart.finalFieldType(level.Level),
    message: dart.finalFieldType(core.String),
    object: dart.finalFieldType(dart.nullable(core.Object)),
    loggerName: dart.finalFieldType(core.String),
    time: dart.finalFieldType(core.DateTime),
    sequenceNumber: dart.finalFieldType(core.int),
    error: dart.finalFieldType(dart.nullable(core.Object)),
    stackTrace: dart.finalFieldType(dart.nullable(core.StackTrace)),
    zone: dart.finalFieldType(dart.nullable(async.Zone))
  }));
  dart.defineExtensionMethods(log_record.LogRecord, ['toString']);
  dart.defineLazy(log_record.LogRecord, {
    /*log_record.LogRecord._nextNumber*/get _nextNumber() {
      return 0;
    },
    set _nextNumber(_) {}
  }, false);
  dart.trackLibraries("packages/logging/src/logger.dart", {
    "package:logging/src/logger.dart": logger,
    "package:logging/src/log_record.dart": log_record
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["logger.dart","log_record.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyBe;;;;;;IAOC;;;;;;IAaY;;;;;;;;AAhBtB,wBAAwB,sCAAxB,OAAQ,AAAK,uBAAb,cAA2B,gBAAoC,SAAnB,AAAE,eAAR,yBAAiB,eAAE,aAAQ;IAAI;;UA0BnD;AAClB,YAAA,AAAS,sCAAY,IAAI,EAAE,cAAa,qBAAO,IAAI;IAAE;;UAU1B;AAC3B,YAAO,6BAAU,IAAI,EAAE,MAAsB;IAAG;;UAEvB;AAC3B,UAAI,AAAK,IAAD,cAAY;AACoC,QAAtD,WAAM,2BAAc;;AAGlB,gBAAM,AAAK,IAAD,eAAa;AACnB;AACD;AACP,UAAI,AAAI,GAAD,KAAI,CAAC;AACV,YAAI,AAAK,IAAD,KAAI,IAAI,AAAmB,SAAV,kBAAO;AACjB,QAAf,WAAW,IAAI;;AAEwB,QAAvC,SAAS,kBAAO,AAAK,IAAD,aAAW,GAAG,GAAG;AACH,QAAlC,WAAW,AAAK,IAAD,aAAW,AAAI,GAAD,GAAG;;AAElC,YAAc,6BAAU,QAAQ,EAAE,MAAM,EAAkB;IAC5D;;;AAeQ;AAEN,UAAI,AAAO;AAGe,QAAxB,iBAAuB,eAAN;YACZ,gBAAK;AACmB,QAA7B,iBAA4B,eAAX,AAAK;;AAEkB,QAAxC,kBAAwB,mBAAP,aAAgB,AAAE,eAAR;;AAI7B,YAAO,AAAe,cAAD;AACrB,YAAO,eAAc;IACvB;cAKiB;AACf,qBAAK,sCAA8B,AAAO;AAGK,QAF7C,WAAM,8BAAgB,AAClB,sEACA;;AAEN,UAAI,AAAO,uBAAW,AAAM,KAAD;AAEwC,QADjE,WAAM,8BACF;;AAEQ,MAAd,eAAS,KAAK;IAChB;;AASkC;IAAY;;;AAG5C,oBAAI,sCAA8B,AAAO;AACnB,aAApB;4BAAa;AACK,QAAlB,oBAAc;;AAEO,QAArB,AAAK;;IAET;;UAGsB;AAAU,YAAC,AAAM,MAAD,OAAI;IAAM;QAmBjC,UAAkB,SACpB,cAAmB,mBAAkB;UADnC;AAEL;AACR,oBAAI,gBAAW,QAAQ;AACrB,YAAY,iBAAR,OAAO;AACU,UAAnB,UAAiB,WAAP,OAAO;;AAGZ;AACP,YAAY,OAAR,OAAO;AACI,UAAb,MAAM,OAAO;;AAEW,UAAxB,MAAc,cAAR,OAAO;AACG,UAAhB,SAAS,OAAO;;AAGlB,YAAI,AAAW,UAAD,sBAAY,AAAS,QAAD,OAAI;AACL,UAA/B,aAAwB;AACgC,UAAxD,AAAM,KAAD,WAAL,QAAU,AAA8C,4CAAd,QAAQ,mBAAE,GAAG,IAAjD;;AAEa,QAArB,AAAK,IAAD,WAAJ,OAAc,qBAAT;AAED,qBACA,6BAAU,QAAQ,EAAE,GAAG,EAAE,eAAU,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM;AAEtE,YAAI,AAAO;AACO,UAAhB,eAAS,MAAM;cACV,gBAAK;AACW,UAArB,AAAK,6BAAS,MAAM;;AAEZ,uBAAS;AACjB,iBAAO,AAAO,MAAD;AACY,YAAvB,AAAO,MAAD,WAAU,MAAM;AACA,YAAtB,SAAS,AAAO,MAAD;;;;IAIvB;WAMoB,SAAkB,cAAmB;AACrD,sBAAU,oBAAQ,OAAO,EAAE,KAAK,EAAE,UAAU;IAAC;UAM9B,SAAkB,cAAmB;AACpD,sBAAU,mBAAO,OAAO,EAAE,KAAK,EAAE,UAAU;IAAC;SAM9B,SAAkB,cAAmB;AACnD,sBAAU,kBAAM,OAAO,EAAE,KAAK,EAAE,UAAU;IAAC;WAM3B,SAAkB,cAAmB;AACrD,sBAAU,oBAAQ,OAAO,EAAE,KAAK,EAAE,UAAU;IAAC;SAM/B,SAAkB,cAAmB;AACnD,sBAAU,kBAAM,OAAO,EAAE,KAAK,EAAE,UAAU;IAAC;YAM1B,SAAkB,cAAmB;AACtD,sBAAU,qBAAS,OAAO,EAAE,KAAK,EAAE,UAAU;IAAC;WAM9B,SAAkB,cAAmB;AACrD,sBAAU,oBAAQ,OAAO,EAAE,KAAK,EAAE,UAAU;IAAC;UAM9B,SAAkB,cAAmB;AACpD,sBAAU,mBAAO,OAAO,EAAE,KAAK,EAAE,UAAU;IAAC;;;AAG9C,oBAAI,sCAA8B,AAAO;AACvC,cACK,EADe,KAAZ,mBAAY,aAAZ,oBAAgB,iDAA4C;;AAGpE,cAAO,AAAK;;IAEhB;eAEwB;;;AAAW;iCAAa,OAAI,MAAM;IAAC;;sCA5LrC,MAAW,QAA4B;QAAvC;QAAuC;IAlDtD;IAcsB;IAoCP;IAAW;IACjB,kBAAE,QAAQ;IACX,kBAAE,iDAAoB,QAAQ;AAC3C,QAAI,AAAO;AACY,MAArB,eAAS;;AAEqB,MAAxB,AAAE,AAAS,eAAjB,+BAAkB,WAAQ;;EAE9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuLoB,kBAAI;YAAG,mBAAO;;MAGD,sBAAQ;YAAmB;;;;;;MA/QzD,iCAA0B;YAAG;;;MAK5B,8BAAuB;YAAS;;;MAGhC,mBAAY;;;;;;;;;;;;;;ICVJ;;;;;;IACC;;;;;;IAGC;;;;;;IAGD;;;;;;IAGE;;;;;;IAGL;;;;;;IAKI;;;;;;IAGI;;;;;;IAGN;;;;;;;AAQS,YAAA,AAAuC,gBAAnC,AAAM,mBAAK,gBAAG,mBAAU,gBAAG;IAAQ;;uCAN7C,OAAY,SAAc,YAC/B,cAAY,mBAAiB,aAAW;;QADnC;QAAY;QAAc;IAA1B;IAAY;IAAc;IAC/B;IAAY;IAAiB;IAAW;IACvC,aAAW;IACD,wBAAuB,KAAX,wFAAW;;EAAE;;;;;;;;;;;;;;;;;;MAdnC,gCAAW;YAAG","file":"../../../../../../../packages/logging/src/logger.dart.lib.js"}');
  // Exports:
  return {
    src__logger: logger,
    src__log_record: log_record
  };
}));

//# sourceMappingURL=logger.dart.lib.js.map
